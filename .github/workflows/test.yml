name: Test Dotfiles Setup

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Cache Homebrew to speed up runs
    - name: Cache Homebrew packages
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Caches/Homebrew
          /home/linuxbrew/.linuxbrew
          ~/.cache/Homebrew
        key: ${{ runner.os }}-homebrew-${{ hashFiles('.github/workflows/Brewfile.test') }}
        restore-keys: |
          ${{ runner.os }}-homebrew-

    # Clear any existing dotfiles for clean test
    - name: Clean existing dotfiles
      run: |
        rm -rf ~/.zshrc ~/.vimrc ~/.gitconfig ~/.config 2>/dev/null || true

    # Test full installation including Homebrew and Sheldon
    - name: Test full dotfiles installation
      env:
        SKIP_CHSH: 1
        DOTFILES_DIR: ${{ github.workspace }}
      run: |
        # Install Homebrew and Sheldon first
        ./install.sh || true  # May fail on brew step, continue anyway
        
        # Install minimal test packages instead of full Brewfiles
        echo "=== Installing test packages ==="
        brew bundle --file=.github/workflows/Brewfile.test
        
        # Complete the setup
        make link
        make config
        
        # Verify installations
        echo "=== Verifying tool installations ==="
        command -v brew && echo "✓ Homebrew installed" || echo "✗ Homebrew missing"
        command -v sheldon && echo "✓ Sheldon installed" || echo "✗ Sheldon missing"
        command -v zsh && echo "✓ Zsh installed" || echo "✗ Zsh missing"
        command -v tmux && echo "✓ Tmux installed" || echo "✗ Tmux missing"
        command -v fzf && echo "✓ FZF installed" || echo "✗ FZF missing"
        
        # Verify symlinks were created
        echo "=== Checking dotfiles symlinks ==="
        ls -la ~/.*rc || true
        ls -la ~/.config/ || true
        
        # Verify packages were installed
        echo "=== Checking installed packages ==="
        brew list || true

    # Test WSL simulation (Linux only)
    - name: Test WSL-specific config merging
      if: runner.os == 'Linux'
      env:
        SKIP_CHSH: 1
        DOTFILES_DIR: ${{ github.workspace }}
        FORCE_OS_TYPE: wsl
      run: |
        # Clean up previous test
        rm -rf ~/.config/*
        
        # Re-run config setup as WSL (without Windows integration)
        cd .config && ./link.sh
        
        # Verify WSL-specific behavior
        echo "=== Checking WSL merged configs ==="
        ls -la .config/_merged/ || true
        
        # Check if WSL configs were applied (common + linux + wsl layers)
        if [ -d ".config/_merged" ]; then
          echo "✓ Merged directory created"
          # Check if layered configs are applied correctly
          echo "=== Checking config layers ==="
          find .config/_merged -type f | head -10
        else
          echo "✗ Merged directory not found"
          exit 1
        fi

    # Verify critical files
    - name: Verify installation results
      env:
        DOTFILES_DIR: ${{ github.workspace }}
      run: |
        echo "=== Final verification ==="
        
        # Check if essential symlinks exist
        test -L ~/.zshrc && echo "✓ .zshrc symlink exists" || echo "✗ .zshrc missing"
        test -L ~/.vimrc && echo "✓ .vimrc symlink exists" || echo "✗ .vimrc missing"
        test -L ~/.gitconfig && echo "✓ .gitconfig symlink exists" || echo "✗ .gitconfig missing"
        
        # Check if config directories are linked
        test -d ~/.config && echo "✓ .config directory exists" || echo "✗ .config missing"
        
        # List all created symlinks
        echo "=== All symlinks in home ==="
        find ~ -maxdepth 1 -type l -ls | grep -v ".cache" || true
        
        echo "=== All symlinks in .config ==="
        find ~/.config -maxdepth 1 -type l -ls 2>/dev/null || true

    # Test idempotency
    - name: Test idempotency
      env:
        SKIP_CHSH: 1
        DOTFILES_DIR: ${{ github.workspace }}
      run: |
        # Test if we can run the setup multiple times
        echo "=== Testing idempotency ==="
        ./install.sh
        
        # Should not fail on second run
        if [ $? -eq 0 ]; then
          echo "✓ Installation is idempotent"
        else
          echo "✗ Installation failed on second run"
          exit 1
        fi